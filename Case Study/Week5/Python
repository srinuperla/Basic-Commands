Variables:
Variables are containers for storing data values
Python has no command for declaring a variable.
A variable is created the moment you first assign a value to it.
Example:
x = 5
y = "Srinivas"
print(x)
print(y)
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0
x = 5
y = "John"
print(type(x))
print(type(y))
a = 4
A = "Sally"
#A will not overwrite a
Variable Names:
A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:
•	A variable name must start with a letter or the underscore character
•	A variable name cannot start with a number
•	A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
•	Variable names are case-sensitive (age, Age and AGE are three different variables)
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"


Data Types
Built-in Data Types
In programming, data type is an important concept.
Variables can store data of different types, and different types can do different things.
Python has the following data types built-in by default, in these categories:
Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
Example	Data Type	Try it
x = "Hello World"	str	Try it »

x = 20	int	Try it »

x = 20.5	float	Try it »

x = 1j	complex	Try it »

x = ["apple", "banana", "cherry"]	list	Try it »

x = ("apple", "banana", "cherry")	tuple	Try it »

x = range(6)	range	Try it »

x = {"name" : "John", "age" : 36}	dict	Try it »

x = {"apple", "banana", "cherry"}	set	Try it »

x = frozenset({"apple", "banana", "cherry"})	frozenset	Try it »

x = True	bool	Try it »

x = b"Hello"	bytes	Try it »

x = bytearray(5)	bytearray	Try it »

x = memoryview(bytes(5))	memoryview	
x = str("Hello World")	str	Try it »

x = int(20)	int	Try it »

x = float(20.5)	float	Try it »

x = complex(1j)	complex	Try it »

x = list(("apple", "banana", "cherry"))	list	Try it »

x = tuple(("apple", "banana", "cherry"))	tuple	Try it »

x = range(6)	range	Try it »

x = dict(name="John", age=36)	dict	Try it »

x = set(("apple", "banana", "cherry"))	set	Try it »

x = frozenset(("apple", "banana", "cherry"))	frozenset	Try it »

x = bool(5)	bool	Try it »

x = bytes(5)	bytes	Try it »

x = bytearray(5)	bytearray	Try it »

x = memoryview(bytes(5))	memoryview	
Numbers:
There are three numeric types in Python:
•	int
•	float
•	complex
Variables of numeric types are created when you assign a value to them:
Example
x = 1    # int
y = 2.8  # float
z = 1j   # complex
Casting:
Specify a Variable Type
There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.
Casting in python is therefore done using constructor functions:
•	int() - constructs an integer number from an integer literal, a float literal (by removing all decimals), or a string literal (providing the string represents a whole number)
•	float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
•	str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals
Example:
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3

x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2

x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0'
Strings:
Strings in python are surrounded by either single quotation marks, or double quotation marks.
'hello' is the same as "hello".
You can display a string literal with the print() function:
Example
print("Hello")
print('Hello')
a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""
print(a)

Boolean Values:
In programming you often need to know if an expression is True or False.
You can evaluate any expression in Python, and get one of two answers, True or False.
When you compare two values, the expression is evaluated and Python returns the Boolean answer:
Example:
a = 200
b = 33

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")
Most Values are True
Almost any value is evaluated to True if it has some sort of content.
Any string is True, except empty strings.
Any number is True, except 0.
Any list, tuple, set, and dictionary are True, except empty ones.
Example:
bool("abc")
bool(123)
bool(["apple", "cherry", "banana"])

Operators:
Operators are used to perform operations on variables and values.
In the example below, we use the + operator to add together two values:
Example:
print(10 + 5)
Python divides the operators in the following groups:
•	Arithmetic operators
•	Assignment operators
•	Comparison operators
•	Logical operators
•	Identity operators
•	Membership operators
•	Bitwise operators
Operator	Name	Example	Try it
+	Addition	x + y	Try it »

-	Subtraction	x - y	Try it »

*	Multiplication	x * y	Try it »

/	Division	x / y	Try it »

%	Modulus	x % y	Try it »

**	Exponentiation	x ** y	Try it »

//	Floor division	x // y	



Comparison Operators
Comparison operators are used to compare two values:
Operator	Name	Example	Try it
==	Equal	x == y	Try it »

!=	Not equal	x != y	Try it »

>	Greater than	x > y	Try it »

<	Less than	x < y	Try it »

>=	Greater than or equal to	x >= y	Try it »

<=	Less than or equal to	x <= y	Try it »

List:
Lists are used to store multiple items in a single variable.
Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
Lists are created using square brackets:
Example:

thislist = ["apple", "banana", "cherry"]
print(thislist)
Tuple:
Tuples are used to store multiple items in a single variable.
Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.
A tuple is a collection which is ordered and unchangeable.
Tuples are written with round brackets.
Example:
thistuple = ("apple", "banana", "cherry")
print(thistuple)
Set:
Sets are used to store multiple items in a single variable.
Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
A set is a collection which is unordered, unchangeable*, and unindexed.
Example:
thisset = {"apple", "banana", "cherry"}
print(thisset)
Dictionary:
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
Example:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
Python Conditions and If statements:
Python supports the usual logical conditions from mathematics:
•	Equals: a == b
•	Not Equals: a != b
•	Less than: a < b
•	Less than or equal to: a <= b
•	Greater than: a > b
•	Greater than or equal to: a >= b
These conditions can be used in several ways, most commonly in "if statements" and loops.
An "if statement" is written by using the if keyword.
Example:
a = 33
b = 200
if b > a:
  print("b is greater than a")

The while Loop:
With the while loop we can execute a set of statements as long as a condition is true.
Example:
i = 1
while i < 6:
  print(i)
  i += 1
For Loops:
A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).
This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.
With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.
Example:
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
Functions:
A function is a block of code which only runs when it is called.
You can pass data, known as parameters, into a function.
A function can return data as a result.
Example:
def my_function():
  print("Hello from a function")

my_function()

Python Lambda:
A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.
Example:
x = lambda a : a + 10
print(x(5))








